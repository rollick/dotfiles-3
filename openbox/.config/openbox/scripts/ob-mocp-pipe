#!/bin/bash
print_item() {
	# ${1} -- Label
	# ${2} -- Command
	if [[ ! -z ${2} ]]; then
		echo "<item label=\"${1}\">"
		echo "<action name=\"Execute\"><command>${2}</command></action>"
		echo "</item>"
	else
		echo "<item label=\"${1}\" />"
	fi
}

print_separator() {
	# Print separator.
	# ${1} -- Label
	if [[ -z ${1} ]]; then
		echo "<separator />"
	else
		echo "<separator label=\"${1}\"/>"
	fi
}


get_mocdir() {
	# Print MOC directory.
	local mocdir

	mocdir="$(grep "MOCDir" "${HOME}/.moc/config"| cut -d '=' -f 2| tr -d " ")"
	echo "${mocdir/\~/${HOME}}"
}

control_commands() {
	# Print commands to control mocp.
	print_separator "Commands"

	if [[ "${1}" == "play" ]]; then
		print_item "Play" "mocp --toggle-pause"
	elif [[ "${1}" == "pause" ]]; then
		print_item "Pause" "mocp --toggle-pause"
	else
		print_item "Play" "mocp --play"
	fi

	if [[ "${1}" != "unstop" ]]; then
		print_item "Previous" "mocp --prev"
		print_item "Next" "mocp --next"
		print_item "Stop" "mocp --stop"
	fi
	print_separator
	print_item "Show mocp" "urxvtc -e mocp"
	print_item "Exit" "mocp --exit"
}

calc_playlistn() {
	# Calculate # of items in mocp's default playlist.
	# ${1} -- Path of playlist
	local playlistn

	if [[ -f "${1}" ]]; then
		playlistn="$(wc -l "${1}"| cut -d ' ' -f 1)"
		playlistn=$(( (${playlistn} -2) / 2))
	else
		playlistn="?"
	fi
	echo "${playlistn}"
}

song_info_stop() {
	# Print information about the currently selected song.
	get_line() {
		echo "$(grep "EXTINF.*," ${1}| awk 'NR==1'| cut -d ',' -f 2)"
	}
	get_trackn() {
		echo "$(get_line ${1} | cut -d ' ' -f 1)"
	}
	get_artist() {
		echo "$(get_line ${1}| cut -d '-' -f 1 | cut -d ' ' -f 2-)"
	}
	get_album() {
		count="$(get_line "${1}"| cut -d '-' -f 2-| grep -o "("| wc -l)"
		echo "$(get_line "${1}"| cut -d '-' -f 2-| cut -d "(" -f $(( ${count} + 1))| tr -d ')')"
	}
	get_songtitle() {
		count="$(get_line "${1}"| cut -d '-' -f 2-| grep -o "("| wc -l)"
		if [[ count -eq 1 ]]; then
			echo "$(get_line "${1}"| cut -d '-' -f 2-| cut -d "(" -f ${count})"
		else
			echo "$(get_line "${1}"| cut -d '-' -f 2-| cut -d "(" -f -${count})"
		fi
	}
	local album
	local artist
	local cmd
	local mocdir
	local playlist
	local songtitle
	local trackn

	cmd="urxvtc -e mocp"
	mocdir="$(get_mocdir)"
	playlist="${mocdir}/playlist.m3u"

	if [[ -f "${playlist}" ]]; then
		artist="$(get_artist ${playlist})"
		album="$(get_album ${playlist})"
		songtitle="$(get_songtitle ${playlist})"

		print_item "Artist: ${artist}" "${cmd}"
		print_item "Title: ${songtitle}" "${cmd}"
		print_item "Album: ${album}" "${cmd}"
		print_item "Track: 1/$(calc_playlistn "${playlist}")" "${cmd}"
	else
		print_item "Empty playlist"
	fi
}
song_info() {
	# Print information about the currently selected song.
	local album
	local artist
	local cmd
	local mocdir
	local playlist
	local songtitle
	local trackn

	cmd="urxvtc -e mocp"
	mocdir="$(get_mocdir)"
	playlist="${mocdir}/playlist.m3u"

	artist="$(LC_ALL=C mocp --info 2>/dev/null| grep "^Artist:")"
	songtitle="$(LC_ALL=C mocp --info 2>/dev/null| grep "^SongTitle:")"
	album="$(LC_ALL=C mocp --info 2>/dev/null| grep "^Album:")"
	trackn="$(LC_ALL=C mocp --info 2>/dev/null| grep "^Title:"| cut -d ' ' -f 2)"

	print_item "${artist}" "${cmd}"
	print_item "${songtitle/SongTitle/Title}" "${cmd}"
	print_item "${album}" "${cmd}"
	print_item "Track: ${trackn}/$(calc_playlistn "${playlist}")" "${cmd}"
}

state=$(LC_ALL=C mocp --info 2>/dev/null | grep State | cut -d ' ' -f 2)

echo "<openbox_pipe_menu>"
	if [[ "${state}" == "PLAY" ]]; then
		print_separator "Playing"
		song_info
		control_commands pause
	elif [[ "${state}" == "PAUSE" ]]; then
		print_separator "Paused"
		song_info
		control_commands play
	elif [[ "${state}" == "STOP" ]]; then
		print_separator "Stopped"
		song_info_stop
		control_commands unstop
	else
		print_separator "Not running"
		print_item "Start mocp server" "mocp --server"
		print_item "Show mocp" "urxvtc -e mocp"
	fi
echo "</openbox_pipe_menu>"
