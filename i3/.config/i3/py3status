#!/bin/env python
import os
import socket

from i3pystatus import Status
from i3pystatus.updates import cower
from i3pystatus.updates import pacman


def first_network_interface(interface_type):
    prefixes = {
        'ethernet': 'e',
        'loopback': 'l',
        'wifi': 'w',
    }
    interfaces = os.listdir('/sys/class/net')

    for interface in interfaces:
        if interface.startswith(prefixes[interface_type]):
            return interface
    else:
        return ''


# Constants
_XDG_CONFIG_HOME = os.path.expanduser(
                       os.environ.get('XDG_CONFIG_HOME', '~/.config')
                   )
ETHERNET_INTERFACE = first_network_interface('ethernet')
HOSTNAME = socket.gethostname()
LAPTOPS = ['asterix']
WIFI_INTERFACE = first_network_interface('wifi')

# Configure i3pystatus
status = Status(standalone=True)

status.register(
        'clock',
        color='#dcdcdc',
        format='%Y-%m-%d %H:%M',
)

status.register(
        'alsa',
        color='#dcdcdc',
        color_muted='#888888',
        format='Volume: {volume}%',
        format_muted='Volume: mute',
        mixer='Headphone',
)

status.register(
        'dpms',
        color='#dcdcdc',
        color_disabled='#888888',
)

status.register(
        'keyboard_locks',
        caps_on='C',
        caps_off='_',
        color='#dcdcdc',
        format='{caps}{num}{scroll}',
        num_on='N',
        num_off='_',
        scroll_on='S',
        scroll_off='_',
)

if HOSTNAME in LAPTOPS:
    status.register(
            'backlight',
            format='Backlight: {percentage}',
            color='#dcdcdc',
    )

if WIFI_INTERFACE:
    status.register(
            'network',
            format_down='Wifi: down',
            format_up='Wifi: {essid}',
            interface=WIFI_INTERFACE,
    )

if ETHERNET_INTERFACE:
    status.register(
            'network',
            format_down='Ethernet: down',
            format_up='Ethernet: up',
            interface=ETHERNET_INTERFACE,
    )

status.register(
        'updates',
        backends=[cower.Cower()],
        color='#dcdcdc',
        format='AUR updates: {count}',
        format_no_updates='',
        interval=10*60,
)

status.register(
        'updates',
        backends=[pacman.Pacman()],
        color='#dcdcdc',
        format='Official updates: {count}',
        format_no_updates='',
        interval=10*60,
)

status.register(
        'cmus',
        color='#dcdcdc',
        format=('[{status} {artist} - {title} ({album}) '
                '\[{song_elapsed:%M:%S}/{song_length:%M:%S}\]]'),
        format_not_running="",
)

status.run()
