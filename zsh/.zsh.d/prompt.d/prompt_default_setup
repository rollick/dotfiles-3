#!/bin/zsh

function prompt_default_setup() {
	# Inlcudes
	##################
	command -v colors &>|/dev/null || autoload -U colors && colors

	# Options for rsc-default prompt
	##################
	prompt_opts=(cr subst percent)

	# Initialize precmd hooks
	##################
	command -v git &>/dev/null && add-zsh-hook precmd prompt_default_git
	add-zsh-hook precmd prompt_default_jobs
    command -v tmux &>/dev/null && add-zsh-hook precmd prompt_default_tmux
    command -v zftp &>/dev/null && add-zsh-hook precmd prompt_default_zftp
	add-zsh-hook precmd prompt_default_prompt
	add-zsh-hook precmd prompt_default_xtitle

	# Information about this prompt
	##################
	export PROMPT_LINES=2

}

function prompt_default_git() {
	local ref
	local stash

	unset prompt_info_git

	ref=${$(git symbolic-ref HEAD 2>|/dev/null)#refs/heads/}
	if [[ ! -z ${ref} ]]; then
		if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
		   [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
			prompt_info_git=$'\u00B1 '
		else
			prompt_info_git="+- "
		fi

		# Set branch
		prompt_info_git+="${ref}"

		# Set status icon
		prompt_info_git+=" "
		if [[ -n $(git status -s 2>|/dev/null) ]]; then
			if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
			   [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
				# Ballot X
				prompt_info_git+=$'\u2717'
			else
				prompt_info_git+="*"
			fi
		else
			if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
			   [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
				# Checmark
				prompt_info_git+=$'\u2713'
			else
				prompt_info_git+="."
			fi
		fi

		# Stash
		stash=$(git stash list 2>|/dev/null |wc -l)
		if (( ${stash} > 0 )); then
			if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
			   [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
				# Eight spoked asterisk
				prompt_info_git+=$' \u2733'
			else
				prompt_info_git+="^${stash}"
			fi
		fi
	fi
}

function prompt_default_jobs() {
	local count

	unset prompt_info_jobs

	count="$(jobs -l |wc -l)"

	if [[ ${count} -ne 0 ]]; then
		prompt_info_jobs="Jobs: ${count}"
	fi
}

function prompt_default_tmux() {
	unset prompt_info_tmux

	if [[ -z ${TMUX_PANE} ]] && tmux list-session &>|/dev/null; then
		if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
		   [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
			prompt_info_tmux=$'\u2B12 '
		else
			prompt_info_git="tmux "
		fi

		prompt_info_tmux+="$(tmux list-sessions |wc -l)"
	fi
}

function prompt_default_zftp() {
	unset prompt_info_zftp

	if [[ ! -z ${ZFTP_HOST} ]]; then
		if [[ ! -z ${ZFTP_USER} ]]; then
			prompt_info_zftp+="${ZFTP_USER}@"
		fi

		prompt_info_zftp+="${ZFTP_HOST}"

		if [[ ! -z ${ZFTP_PORT} ]]; then
			if [[ ${ZFTP_PORT} -ne 21 ]]; then
				prompt_info_zftp+=":${ZFTP_PORT}"
			fi
		fi

		prompt_info_zftp+=" ${ZFTP_PWD}"
	fi
}

function prompt_default_xtitle() {
	case "${TERM}" in
		xterm* | rxvt* )	print -Pn "\e]0;%n@%m: %~\a";;
		screen*)			print -Pn "\ek%n@%m: %~\e\\";;
	esac
}

function prompt_default_prompt() {
	# Set local variables
	##################
	local prompt_char_tlc
	local prompt_char_blc
	local prompt_char_close
	local prompt_char_mlc
	local prompt_char_hyphen
	local prompt_color_div
	local prompt_color_dir
	local prompt_color_error
	local prompt_color_line
	local prompt_color_rprompt
	local prompt_color_user

	local prompt_gfx_blc
	local prompt_gfx_close
	local prompt_gfx_colon
	local prompt_gfx_hyphen
	local prompt_gfx_lbracket
	local prompt_gfx_lparent
	local prompt_gfx_mlc
	local prompt_gfx_plus
	local prompt_gfx_rbracket
	local prompt_gfx_rparent
	local prompt_gfx_separator
	local prompt_gfx_tlc

	# Set color information
	##################
	if (( ${UID} == 0 )); then
		local prompt_color_user='%{$fg_bold[red]%}'
	else
		local prompt_color_user='%{$fg_bold[green]%}'
	fi
	prompt_color_dir='%{$fg_bold[blue]%}'
	prompt_color_div='%{$fg_bold[black]%}'
	prompt_color_error='%{$fg_bold[red]%}'
	prompt_color_line='%{$fg_bold[cyan]%}'
	prompt_color_rprompt="${prompt_color_dir}"

	# Use some ANSI characters if supported
	##################
	#if [[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *utf8* ]] ||
	   #[[ ${LC_ALL:-${LC_CTYPE:-$LANG}} = *UTF-8* ]]; then
		prompt_char_tlc=$'\u250C'
		prompt_char_blc=$'\u2514'
		prompt_char_close=$'\u25B6'
		prompt_char_mlc=$'\u251C'
		prompt_char_hyphen=$'\u2500'
	#else
		#prompt_char_tlc='.'
		#prompt_char_blc='\`'
		#prompt_char_close='>'
		#prompt_char_mlc='|'
		#prompt_char_hyphen='-'
	#fi

	# Combine colors and characters
	##################
	prompt_gfx_blc="${prompt_color_line}${prompt_char_blc}"
	prompt_gfx_close="${prompt_color_line}${prompt_char_close}"
	prompt_gfx_colon="${prompt_color_div}:"
	prompt_gfx_hyphen="${prompt_color_line}${prompt_char_hyphen}"
	prompt_gfx_lbracket="${prompt_color_div}["
	prompt_gfx_lparent="${prompt_color_div}("
	prompt_gfx_mlc="${prompt_color_div}${prompt_char_mlc}"
	prompt_gfx_plus="${prompt_color_line}+"
	prompt_gfx_rbracket="${prompt_color_div}]"
	prompt_gfx_rparent="${prompt_color_div})"
	prompt_gfx_separator="${prompt_color_div}|"
	prompt_gfx_tlc="${prompt_color_line}${prompt_char_tlc}"
	# Main prompt
	####################
	# Start prompt
	PROMPT="${prompt_gfx_tlc}"

	# user and hostname information
	PROMPT+="${prompt_gfx_lparent}${prompt_color_user}%n@%m${prompt_gfx_rparent}"
	PROMPT+="${prompt_gfx_hyphen}"

	# PWD information
	PROMPT+="${prompt_gfx_lparent}${prompt_color_dir}%~${prompt_gfx_rparent}"

	# Close prompt
	PROMPT+="${prompt_newline}"
	PROMPT+="${prompt_gfx_blc}"
	PROMPT+="${prompt_gfx_close}%{$reset_color%} "

	# Secondary prompt: More information needed
	####################
	PROMPT2="${prompt_gfx_mlc}${prompt_gfx_close}%{$reset_color%} "

	# Execution trace prompt
	####################
	PROMPT4="${prompt_gfx_plus}%{$reset_color%} "

	# RPROMPT
	####################
	() {
		unset RPROMPT
		until [[ -z ${1} ]]; do
			if [[ "${RPROMPT}" != "" ]]; then
				RPROMPT+="${prompt_gfx_separator}"
			else
				RPROMPT="${prompt_gfx_lbracket}"
			fi
			RPROMPT+="${prompt_color_rprompt}${1}"
			shift
		done
		if [[ ! -z ${RPROMPT} ]]; then
			RPROMPT+="${prompt_gfx_rbracket}%{$reset_color%}"
		fi
	} ${prompt_info_zftp} ${prompt_info_git} ${prompt_info_tmux} ${prompt_info_jobs}

	# Prompt for spelling correction
	####################
	SPROMPT="zsh: correct %R to %r ([Y]es/[N]o/[E]dit/[A]bort) "
}

prompt_default_setup
