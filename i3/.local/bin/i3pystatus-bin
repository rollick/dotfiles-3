#!/bin/env python
# Copyright (C) 2015 by Raphael Scholer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Configuration for i3pystatus."""
import configparser
import os
import socket

from i3pystatus import Status
from i3pystatus.mail import imap
from i3pystatus.updates import cower
from i3pystatus.updates import pacman


COLOR_DEFAULT = '#f5f6f7'
COLOR_DISABLED = '#afb8c5'
COLOR_INDICATOR = '#cc575d'


def first_network_interface(interface_type):
    """Get first network interface of specific type.

    Possible types:
        - ethernet
        - loopback
        - wifi
    """
    prefixes = {
        'ethernet': 'e',
        'loopback': 'l',
        'wifi': 'w',
    }
    interfaces = os.listdir('/sys/class/net')

    for interface in interfaces:
        if interface.startswith(prefixes[interface_type]):
            return interface
    else:
        return ''


# Constants
_XDG_CONFIG_HOME = os.path.expanduser(
    os.environ.get('XDG_CONFIG_HOME', '~/.config')
)
ETHERNET_INTERFACE = first_network_interface('ethernet')
HOSTNAME = socket.gethostname()
LAPTOPS = ['asterix']
MAIL_ACCOUNTS = configparser.ConfigParser()
MAIL_ACCOUNTS.read(os.path.join(_XDG_CONFIG_HOME, 'mail_accounts'))
WIFI_INTERFACE = first_network_interface('wifi')

# Configure i3pystatus
status = Status(standalone=True)

status.register(
    'clock',
    color=COLOR_DEFAULT,
    format='%Y-%m-%d %H:%M',
)

status.register(
    'alsa',
    color=COLOR_DEFAULT,
    color_muted=COLOR_DISABLED,
    format='\U0001f50a {volume}%',
    format_muted='\U0001f507 {volume}%',
    mixer='Headphone',
)

status.register(
    'keyboard_locks',
    caps_on='\U0001f170',
    caps_off='\U0001f130',
    color=COLOR_DEFAULT,
    format='{caps}{num}{scroll}',
    num_on='\U0001f17d',
    num_off='\U0001f13d',
    scroll_on='\U0001f182',
    scroll_off='\U0001f142',
)

if HOSTNAME in LAPTOPS:
    status.register(
        'backlight',
        format='\u2600 {percentage}%',
        color=COLOR_DEFAULT,
    )

if WIFI_INTERFACE:
    status.register(
        'network',
        color_down=COLOR_DISABLED,
        color_up=COLOR_DEFAULT,
        format_down='\U0001f4f6',
        format_up='\U0001f4f6',
        dynamic_color=False,
        interface=WIFI_INTERFACE,
    )

if ETHERNET_INTERFACE:
    status.register(
        'network',
        color_down=COLOR_DISABLED,
        color_up=COLOR_DEFAULT,
        format_down='\U0001f5a7',
        format_up='\U0001f5a7',
        interface=ETHERNET_INTERFACE,
    )

if ETHERNET_INTERFACE or WIFI_INTERFACE:
    status.register(
        'online',
        color=COLOR_DEFAULT,
        color_offline=COLOR_INDICATOR,
        format_online='\U0001f30d',
        format_offline='No internet connection',
    )

status.register(
    'updates',
    backends=[pacman.Pacman(), cower.Cower()],
    color=COLOR_INDICATOR,
    format='\u26a0 {count}',
    format_no_updates='',
    format_working='',
    interval=10*60,
)

status.register(
    'mail',
    backends=[
        imap.IMAP(
            host='imap.gmail.com',
            username=MAIL_ACCOUNTS['Gmail']['user'],
            password=MAIL_ACCOUNTS['Gmail']['password'],
        ),
    ],
    color=COLOR_DEFAULT,
    color_unread=COLOR_INDICATOR,
    format='\U0001f4e7 {unread}',
    format_plural='\U0001f4e7 {current_unread}',
    interval=60,
)

status.register(
    'cmus',
    color=COLOR_DEFAULT,
    format='{status}',
    format_not_running="",
)

status.run()
