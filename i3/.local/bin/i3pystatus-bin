#!/bin/env python
# Copyright (C) 2015-2016 by Raphael Scholer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Configuration for i3pystatus."""
import collections
import datetime
import fnmatch
import functools
import os
import shutil
import sys

import i3pystatus
import i3pystatus.updates.aptget
import i3pystatus.updates.cower
import i3pystatus.updates.dnf
import i3pystatus.updates.pacman
import i3pystatus.updates.yaourt
import psutil


COLOR_DEFAULT = None
COLOR_DISABLED = '#afb8c5'
COLOR_IMPORTANT = '#cc575d'


class RebootReminder(i3pystatus.IntervalModule):
    """Show notification if a initramfs was updated."""

    settings = (
        ('color', 'The color of the text'),
        ('pattern', 'Glob pattern to detect initramfs'),
        ('text', 'Text to display')
    )

    boottime = datetime.datetime.fromtimestamp(psutil.boot_time())
    color = '#ff0000'
    interval = 10
    pattern = '*.img'
    text = 'Reboot required'

    def run(self):
        """Run module."""
        if not self.output:
            with os.scandir('/boot') as dircontent:
                for entry in dircontent:
                    if fnmatch.fnmatch(entry.name, self.pattern) and entry.is_file():
                        mtime = datetime.datetime.fromtimestamp(entry.stat().st_mtime)

                        if mtime > self.boottime:
                            self.output = {
                                'color': self.color,
                                'full_text': self.text
                            }

                            break
                else:
                    self.output = None


@functools.lru_cache()
def network_interface(network_type):
    """Get first network interface of specific type.

    Positional arguments:
        network_type -- Type of network interface to search for.
                        Possible values: ethernet, wifi, wireless.

    Return value:
        string -- String containing interface name (eg. 'eth0').
                  An empty string will be returned if no interface was found.
    """
    wildcard = {
        'ethernet': 'e*',
        'wifi': 'w*',
        'wireless': 'w*',
    }

    with os.scandir('/sys/class/net') as dircontent:
        for entry in dircontent:
            if fnmatch.fnmatch(entry.name, wildcard[network_type]):
                return entry.name
        else:
            return ''


@functools.lru_cache()
def package_managers():
    """Identify all possible package managers.

    Return value:
        collections.OrderedDict -- Name and backendclass key/value pairs.
    """
    backends = collections.OrderedDict()

    if shutil.which('pacman') and shutil.which('makepkg'):
        backends['{Pacman}'] = i3pystatus.updates.pacman.Pacman()

        if shutil.which('cower'):
            backends['{Cower}'] = i3pystatus.updates.cower.Cower()
        elif shutil.which('yaourt'):
            backends['{Cower}'] = i3pystatus.updates.yaourt.Yaourt()
    elif shutil.which('apt-get'):
        backends['{AptGet}'] = i3pystatus.updates.aptget.AptGet()
    elif shutil.which('dnf'):
        backends['{Dnf}'] = i3pystatus.updates.dnf.Dnf()

    return backends


def main():
    """Configure and run i3pystatus."""
    status = i3pystatus.Status(standalone=True, click_events=False)

    status.register(
        'clock',
        color=COLOR_DEFAULT,
        format='%Y-%m-%d %H:%M',
    )

    status.register(
        'alsa',
        color=COLOR_DEFAULT,
        color_muted=COLOR_DISABLED,
        format='\uf028 {volume}%',
        format_muted='\uf026   {volume}%',
        mixer='Headphone',
    )

    status.register(
        'keyboard_locks',
        caps_off='\U0001f130',
        caps_on='\U0001f170',
        color=COLOR_DEFAULT,
        format='{caps}{num}{scroll}',
        num_off='\U0001f13d',
        num_on='\U0001f17d',
        scroll_off='\U0001f142',
        scroll_on='\U0001f182',
    )

    if network_interface('ethernet') or network_interface('wifi'):
        if network_interface('wifi'):
            status.register(
                'network',
                color_down=COLOR_DISABLED,
                color_up=COLOR_DEFAULT,
                dynamic_color=False,
                format_down='\uf1eb',
                format_up='\uf1eb',
                interface=network_interface('wifi'),
            )

        if network_interface('ethernet'):
            status.register(
                'network',
                color_down=COLOR_DISABLED,
                color_up=COLOR_DEFAULT,
                format_down='\uf0e8',
                format_up='\uf0e8',
                interface=network_interface('ethernet'),
            )

        status.register(
            'online',
            color=COLOR_DEFAULT,
            color_offline=COLOR_DISABLED,
            format_offline='\uf127',
            format_online='\uf0c1',
        )

    status.register(
        'cmus',
        color=COLOR_DEFAULT,
        format=(
            '{status}'
            '[ {artist} - {title} - {album}]'
            '[ ({song_elapsed:%M:%S}/{song_length:%M:%S})]'
        ),
        format_not_running='',
        status={
            'paused': '\uf04c ',
            'playing': '\uf04b ',
            'stopped': '\uf04d',
        }
    )

    if (network_interface('ethernet') or network_interface('wifi')) and package_managers():
        status.register(
            'updates',
            backends=list(package_managers().values()),
            color=COLOR_IMPORTANT,
            format=f"\uf021 {'/'.join(package_managers())}",
            format_no_updates='',
            format_working='',
            interval=10 * 60,
        )

    status.register(
        RebootReminder,
        color=COLOR_IMPORTANT,
        text='\uf011 Reboot required',
    )

    status.run()


if __name__ == '__main__':
    sys.exit(main())
