"""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin management with Vundle
"""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vim/vundle.vim

"""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""
" Disable vi compatibility
set nocompatible

" Enable filetype plugin
filetype plugin indent on

" Maximum number of changes that can be undone
set undolevels=1000

" Maximum number of lines to save for undo on a buffer reload
set undoreload=1000

" Don't use backupfiles that's what a VCS is for.
set nobackup

" Swap files? Never needed them.
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""
" UI settings
"""""""""""""""""""""""""""""""""""""""""""""""""
set title
" Enable syntax highlightning
if &t_Co > 2
	syntax on
endif

" Size of foldcolumn (max: 12)
set foldcolumn=2

" Show line numbers
set number

" dfjhdskjf
set textwidth=79

" Setup colorschemes
if &t_Co == 256
	colorscheme distinguished
endif

" Enable colorcolumn and cursorline
if &t_Co > 2
	set colorcolumn=+1
	set cursorline
endif

" Show mode in cmdline
set showmode

" Show incomplete command in cmdline
set showcmd

" Show statusline
set ruler
set laststatus=2 "0 = Never, 1=2+ Windows, 2=Always

" Set height of cmdline
set cmdheight=1

" Keep n lines above/under cursor
set scrolloff=3

" Keep n columns left/right of cursor
set sidescrolloff=3

" Use wildmenu
set wildmenu

" Set incremental search
set incsearch

" Highlight search results
set hlsearch

" Show invisible characters
" See dig for characters
" Ctrl+k vv: │
" Ctrl+k <<: «
" Ctrl+k >>: »
" Ctrl+k .M: ·
" Ctrl+k FB: █
" Ctrl+k PI: ¶
set listchars=tab:\│\ ,trail:·,extends:»,precedes:«,eol:¶,nbsp:█

"""""""""""""""""""""""""""""""""""""""""""""""""
" Printing
"""""""""""""""""""""""""""""""""""""""""""""""""
set printdevice=PDF-Printer
set printoptions=number:n,syntax:n

" Set dictionary for spell checking
set spelllang=en


"""""""""""""""""""""""""""""""""""""""""""""""""
" Wildmenu
"""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore audio files
set wildignore+=*.flac,*.ogg,*.mp3,*.wav,*.wma

" Ignore backup files
set wildignore+=*~,*.backup,*.bak,*.swp

" Ignore bash files
set wildignore+=~/.bash_history

" Ignore databases
set wildignore+=*.db,*.sqlite

" Ignore image files
set wildignore+=*.bmp,*.gif,*.jpe,*.jpeg,*.jpg,*.png,*.psd,*.xcf,*.xpm

" Ignore matlab files
set wildignore+=matlab_crash_dump*

" Ignore miscellaneous files
set wildignore+=*.dat,*.directory,*.lock,*.nb,*.torrent,*.DS_Store
set wildignore+=_MACOSX,~/.MP3Diags.dat,~/.esd_auth,~/.face

" Ignore object files
set wildignore+=*.o,*.obj,*.pyc

" Ignore octave files
set wildignore+=octave-core,~/octave_hist

" Ignore video files
set wildignore+=*.avi,*.flv,*.mkv,*.mp4,*.mpeg,*.mpg,*.ogv,*.wmv

" Ignore zsh files
set wildignore+=~/.zcompdump,~/.zsh_history

" Ignore X files
set wildignore+=~/.ICEauthority,~/.Xauthority


"""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd
"""""""""""""""""""""""""""""""""""""""""""""""""
" Strip trailing whitespace on saving a file
" (This should be OK, except you use an esoteric programming language like
" Whitespace.)
autocmd BufWritePre * :call StripTrailingWhitespace()


"""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: vim-airline
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_left_sep=""
let g:airline_right_sep=""

"""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: Markdown
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:vim_markdown_folding_disabled=1


"""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: MRU
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:MRU_File=expand('~/.vim/.recently-used')
let g:MRU_Max_Entries=10
let MRU_Exclude_Files = '^/tmp/.*\|^/var/tmp/.*|.vimrc$'


"""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: NERDTree
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDChristmasTree=1
let g:NERDTreeHighlightCursorline=0
let g:NERDTreeHijackNetrw=1
let g:NERDTreeQuitOnOpen=1


"""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax: python
"""""""""""""""""""""""""""""""""""""""""""""""""
let g:python_highlight_all = 1


"""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""
" Set <leader>
let mapleader=","
let g:mapleader=","

" Fast reload of ~/.vimrc
nmap <leader>r :source ~/.vimrc<cr>

" Don't move cursor when repeating last command with "."
nmap . .`[

" Easy use of tabs
nmap <leader>to :tabnew<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>tn :tabnext<cr>
nmap <leader>tp :tabprevious<cr>

" Toggle folds
noremap <space> za

" Toggle pastemode
nmap <silent><leader>p :set paste!<BAR>:silent set paste?<cr>

" Select recently used files
nmap <silent><leader>f :MRU<cr>

" Toggle NERDTree
nmap <silent><leader>b :NERDTreeToggle<CR>

" Avoid accidental hits of <F1> while aiming for <ESC>
noremap <F1> <Esc>

" Quick close of VIm
nmap <leader>q :quit<CR>

" Quick save of VIm
nmap <leader>w :write<CR>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
nnoremap <leader>nc <C-w>v<C-w>l

" Clears the search register
nmap <silent><leader>/ :nohlsearch<CR>

" Jump to matching pairs easily, with Tab
nnoremap <Tab> %

" Toggle 'set list'
nmap <silent><leader>l :set list!<CR>

" Easy access to vimrc
nmap <silent><leader>e :e ~/.vimrc<CR>

" Don't use ex-mode
nnoremap Q gq

let g:EasyMotion_leader_key = '<leader><leader>'


"""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""
function! StripTrailingWhitespace()
	" Strip Trailing Whitespace

	" Don't run on some filetypes
	if &ft =~ 'asciidoc\|markdown\|mkd'
		return
	endif

	" Save cursor position
	let line = line(".")
	let col = col(".")

	" Remove trailing whitespace
	%s:\s\+$::e

	" Restore cursor position
	call cursor(line, col)
endfunction

function! MyFoldText()
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction
