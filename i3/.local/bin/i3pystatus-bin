#!/bin/env python
# Copyright (C) 2015-2016 by Raphael Scholer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Configuration for i3pystatus."""
import collections
import os
import shutil
import sys
import tempfile

import i3pystatus
import i3pystatus.updates.cower
import i3pystatus.updates.pacman


COLOR_DEFAULT = None
COLOR_DISABLED = '#afb8c5'
COLOR_IMPORTANT = '#cc575d'


PackageManagerBackends = collections.namedtuple(
    'PackageManagerBackends', ['classes', 'names']
)
PackageManagerBackends.__doc__ = 'Available package manager backends.'
PackageManagerBackends.classes.__doc__ = 'Class object of available backends.'
PackageManagerBackends.names.__doc__ = 'Names of available backends.'


class RebootReminder(i3pystatus.IntervalModule):
    """Remind the user to reboot if e.g. a new kernel was installed.

    Settings:
        color - The color of the text.
        text - Text to display.
    """

    settings = (
        ('color', 'The color of the text'),
        ('text', 'Text to display')
    )

    color = '#ff0000'
    interval = 10
    text = 'Reboot required'

    status_file = os.path.join(tempfile.gettempdir(), 'reboot_needed')

    def run(self):
        """Run module."""
        if not os.path.isfile(self.status_file):
            self.output = None
        else:
            self.output = {
                'full_text': self.text,
                'color': self.color
            }


def first_network_interface(interface_type):
    """Get first network interface of specific type.

    Positional arguments:
        interface_type -- Interface type to test for.
                          Possible types:
                              - ethernet
                              - loopback
                              - wifi

    Return value:
        string -- String containing interface name (eg. 'eth0').
                  An empty string will be returned if no interface was found.
    """
    prefixes = {
        'ethernet': 'e',
        'loopback': 'l',
        'wifi': 'w',
    }

    prefix = prefixes[interface_type]

    for entry in os.scandir('/sys/class/net'):
        if entry.is_dir() and entry.name.startswith(prefix):
            return entry.name
    else:
        return ''


def get_package_managers():
    """Identify all possible package managers.

    Return value:
        tuple -- First element is a list containing all backend classes
                 Second element is a list containing all names of the backend
                    classes intended to be used in a format string.
    """
    classes = []
    names = []

    if shutil.which('pacman') and shutil.which('makepkg'):
        classes.append(i3pystatus.updates.pacman.Pacman())
        names.append('{Pacman}')

        if shutil.which('cower'):
            classes.append(i3pystatus.updates.cower.Cower())
            names.append('{Cower}')
        elif shutil.which('yaourt'):
            classes.append(i3pystatus.updates.yaourt.Yaourt())
            names.append('{Yaourt}')
    elif shutil.which('apt-get'):
        classes.append(i3pystatus.updates.aptget.AptGet())
        names.append('{AptGet}')
    elif shutil.which('dnf'):
        classes.append(i3pystatus.updates.dnf.Dnf())
        names.append('{Dnf}')

    return PackageManagerBackends(classes, names)


def is_laptop():
    """Detect whether or not the current machine is a laptop.

    Return value:
        bool -- True -- Machine is a laptop (or related type).
                False -- Machine is a desktop PC.
    """
    for entry in os.scandir('/sys/class/power_supply'):
        if entry.isdir() and entry.name.startswith('BAT'):
            return True
    else:
        return False


def main():
    """Configure and run i3pystatus."""
    ethernet_interface = first_network_interface('ethernet')
    laptop = is_laptop()
    package_managers = get_package_managers()
    wifi_interface = first_network_interface('wifi')

    status = i3pystatus.Status(standalone=True, click_events=False)

    status.register(
        'clock',
        color=COLOR_DEFAULT,
        format='%Y-%m-%d %H:%M',
    )

    status.register(
        'alsa',
        color=COLOR_DEFAULT,
        color_muted=COLOR_DISABLED,
        format='\uf028 {volume}%',
        format_muted='\uf026   {volume}%',
        mixer='Headphone',
    )

    if laptop:
        status.register(
            'backlight',
            color=COLOR_DEFAULT,
            format='\uf185 {percentage}%',
        )

    status.register(
        'keyboard_locks',
        caps_off='\U0001f130',
        caps_on='\U0001f170',
        color=COLOR_DEFAULT,
        format='{caps}{num}{scroll}',
        num_off='\U0001f13d',
        num_on='\U0001f17d',
        scroll_off='\U0001f142',
        scroll_on='\U0001f182',
    )

    if ethernet_interface or wifi_interface:
        if wifi_interface:
            status.register(
                'network',
                color_down=COLOR_DISABLED,
                color_up=COLOR_DEFAULT,
                dynamic_color=False,
                format_down='\uf1eb',
                format_up='\uf1eb',
                interface=wifi_interface,
            )

        if ethernet_interface:
            status.register(
                'network',
                color_down=COLOR_DISABLED,
                color_up=COLOR_DEFAULT,
                format_down='\uf0e8',
                format_up='\uf0e8',
                interface=ethernet_interface,
            )

        status.register(
            'online',
            color=COLOR_DEFAULT,
            color_offline=COLOR_DISABLED,
            format_offline='\uf127',
            format_online='\uf0c1',
        )

    status.register(
        'moc',
        color=COLOR_DEFAULT,
        format=(
            '{status}'
            '[ {artist} - {title} - {album}]'
            '[ ({song_elapsed:%M:%S}/{song_length:%M:%S})]'
        ),
        format_not_running='',
        status={
            'pause': '\uf04c ',
            'play': '\uf04b ',
            'stop': '\uf04d',
        }
    )

    if (ethernet_interface or wifi_interface) and package_managers:
        status.register(
            'updates',
            backends=package_managers.classes,
            color=COLOR_IMPORTANT,
            format=f"\uf06a {'/'.join(package_managers.names)}",
            format_no_updates='',
            format_working='',
            interval=10 * 60,
        )

    status.register(
        RebootReminder,
        color=COLOR_IMPORTANT,
        text='\uf011 Reboot required'
    )

    status.run()


if __name__ == '__main__':
    sys.exit(main())
