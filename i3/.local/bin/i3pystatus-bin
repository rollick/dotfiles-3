#!/bin/env python
# Copyright (C) 2015 by Raphael Scholer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
"""Configuration for i3pystatus."""
import configparser
import os
import sys

from i3pystatus import Status
from i3pystatus.mail import imap
from i3pystatus.updates import cower
from i3pystatus.updates import pacman


_XDG_CONFIG_HOME = os.path.expanduser(
    os.environ.get('XDG_CONFIG_HOME', '~/.config')
)
COLOR_DEFAULT = None
COLOR_DISABLED = '#afb8c5'
COLOR_IMPORTANT = '#cc575d'
CONFIG_MAIL_ACCOUNTS = os.path.join(_XDG_CONFIG_HOME, 'mail_accounts.ini')


def first_network_interface(interface_type):
    """Get first network interface of specific type.

    Positional arguments:
        interface_type -- Interface type to test for.
                          Possible types:
                              - ethernet
                              - loopback
                              - wifi

    Return value:
        string -- String containing interface name (eg. 'eth0').
                  An empty string will be returned if no interface was found.
    """
    prefixes = {
        'ethernet': 'e',
        'loopback': 'l',
        'wifi': 'w',
    }
    interfaces = os.listdir('/sys/class/net')

    for interface in interfaces:
        if interface.startswith(prefixes[interface_type]):
            return interface
    else:
        return ''


def is_laptop():
    """Detect whether or not the current machine is a laptop.

    Return value:
        bool -- True -- Machine is a laptop (or related type).
                False -- Machine is a desktop PC.
    """
    proc_path = '/proc/acpi/battery/'
    sys_path = '/sys/class/module/battery/'

    if os.path.exists(sys_path) or os.path.exists(proc_path):
        return True
    else:
        return False


def main():
    """Configure and run i3pystatus."""
    ethernet_interface = first_network_interface('ethernet')
    mail_accounts = configparser.ConfigParser()
    mail_accounts.read(CONFIG_MAIL_ACCOUNTS)
    wifi_interface = first_network_interface('wifi')

    status = Status(standalone=True, click_events=False)

    status.register(
        'clock',
        color=COLOR_DEFAULT,
        format='%Y-%m-%d %H:%M',
        interval=1,
    )

    if is_laptop():
        status.register(
            'battery',
            alert=True,
            alert_percentage=5,
            color=COLOR_DEFAULT,
            interval=5,
        )

    status.register(
        'alsa',
        color=COLOR_DEFAULT,
        color_muted=COLOR_DISABLED,
        format='\uf028 {volume}%',
        format_muted='\uf026   {volume}%',
        interval=1,
        mixer='Headphone',
    )

    status.register(
        'keyboard_locks',
        caps_on='\U0001f170',
        caps_off='\U0001f130',
        color=COLOR_DEFAULT,
        format='{caps}{num}{scroll}',
        interval=1,
        num_on='\U0001f17d',
        num_off='\U0001f13d',
        scroll_on='\U0001f182',
        scroll_off='\U0001f142',
    )

    if is_laptop():
        status.register(
            'backlight',
            format='\uf185 {percentage}%',
            color=COLOR_DEFAULT,
            interval=1,
        )

    if wifi_interface:
        status.register(
            'network',
            color_down=COLOR_DISABLED,
            color_up=COLOR_DEFAULT,
            format_down='\uf1eb',
            format_up='\uf1eb',
            dynamic_color=False,
            interface=wifi_interface,
            interval=10,
        )

    if ethernet_interface:
        status.register(
            'network',
            color_down=COLOR_DISABLED,
            color_up=COLOR_DEFAULT,
            format_down='\uf0e8',
            format_up='\uf0e8',
            interface=ethernet_interface,
            interval=10,
        )

    if ethernet_interface or wifi_interface:
        status.register(
            'online',
            color=COLOR_DEFAULT,
            color_offline=COLOR_DISABLED,
            format_online='\uf0c1',
            format_offline='\uf127',
            interval=10,
        )

    status.register(
        'cmus',
        color=COLOR_DEFAULT,
        format=(
            '{status}'
            '[ {artist} - {title} - {album}]'
            '[ ({song_elapsed:%M:%S}/{song_length:%M:%S})]'
        ),
        format_not_running='',
        interval=1,
        status={
            'paused': '\uf04c ',
            'playing': '\uf04b ',
            'stopped': '\uf04d',
        }
    )

    if 'Gmail' in mail_accounts:
        status.register(
            'mail',
            backends=[
                imap.IMAP(
                    host='imap.gmail.com',
                    username=mail_accounts['Gmail']['user'],
                    password=mail_accounts['Gmail']['password'],
                ),
            ],
            color=COLOR_DEFAULT,
            color_unread=COLOR_IMPORTANT,
            format='\uf0e0 {unread}',
            format_plural='\uf0e0 {current_unread}',
            interval=60,
        )
    else:
        status.register(
            'text',
            color=COLOR_IMPORTANT,
            text='Mail configuration for "Gmail" not found.',
        )

    status.register(
        'updates',
        backends=[pacman.Pacman(), cower.Cower()],
        color=COLOR_IMPORTANT,
        format='\uf06a {Pacman}/{Cower}',
        format_no_updates='',
        format_working='',
        interval=10 * 60,
    )

    status.run()


if __name__ == '__main__':
    sys.exit(main())
