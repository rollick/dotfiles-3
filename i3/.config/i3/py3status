#!/bin/env python
import configparser
import os
import socket

from i3pystatus import Status
from i3pystatus.mail import imap
from i3pystatus.updates import cower
from i3pystatus.updates import pacman

# Constants
_XDG_CONFIG_HOME = os.path.expanduser(
                       os.environ.get('XDG_CONFIG_HOME', '~/.config')
                   )
ETHERNET = {
        'asterix': 'enp4s0',
        'obelix': 'enp4s0'
}
HOSTNAME = socket.gethostname()
LAPTOPS = ['asterix']
MAIL_ACCOUNTS = configparser.ConfigParser()
MAIL_ACCOUNTS.read(os.path.join(_XDG_CONFIG_HOME, 'mail_accounts'))
WIFI = {
        'asterix': 'wlp3s0',
        'obelix': 'wlp3s0'
}

# Configure i3pystatus
status = Status(standalone=True)

status.register(
        'clock',
        color='#dcdcdc',
        format='%Y-%m-%d %H:%M',
)

status.register(
        'alsa',
        color='#dcdcdc',
        color_muted='#888888',
        format='Volume: {volume}%',
        format_muted='Volume: mute',
        mixer='Headphone',
)

status.register(
        'dpms',
        color='#dcdcdc',
        color_disabled='#888888',
)

status.register(
        'keyboard_locks',
        caps_on='C',
        caps_off='_',
        color='#dcdcdc',
        format='{caps}{num}{scroll}',
        num_on='N',
        num_off='_',
        scroll_on='S',
        scroll_off='_',
)

if HOSTNAME in LAPTOPS:
    status.register(
            'backlight',
            format='Backlight: {percentage}',
            color='#dcdcdc',
    )

if HOSTNAME in WIFI:
    status.register(
            'network',
            format_down='Wifi: down',
            format_up='Wifi: {essid}',
            interface=WIFI[HOSTNAME],
    )

if HOSTNAME in ETHERNET:
    status.register(
            'network',
            format_down='Ethernet: down',
            format_up='Ethernet: up',
            interface=ETHERNET[HOSTNAME],
    )

status.register(
        'updates',
        backends=[cower.Cower()],
        color='#dcdcdc',
        format='AUR updates: {count}',
        format_no_updates='',
        interval=10*60,
)

status.register(
        'updates',
        backends=[pacman.Pacman()],
        color='#dcdcdc',
        format='Official updates: {count}',
        format_no_updates='',
        interval=10*60,
)

status.register(
        'mail',
        backends=[
            imap.IMAP(
                host='imap.gmail.com',
                username=MAIL_ACCOUNTS['Gmail']['user'],
                password=MAIL_ACCOUNTS['Gmail']['password'],
                account='Gmail',
            ),
        ],
        format='{account}: {unread} new mail',
        format_plural='{account}: {current_unread} new mails',
        interval=60,
)

status.register(
        'cmus',
        color='#dcdcdc',
        format=('[{status} {artist} - {title} ({album}) '
                '\[{song_elapsed:%M:%S}/{song_length:%M:%S}\]]'),
        format_not_running="",
)

status.run()
